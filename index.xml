<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Home on My New Hugo Site</title><link>https://dk3156.github.io/dongje.kim/</link><description>Recent content in Home on My New Hugo Site</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Sat, 17 Jun 2023 00:00:00 +0000</lastBuildDate><atom:link href="https://dk3156.github.io/dongje.kim/index.xml" rel="self" type="application/rss+xml"/><item><title>Amazon Web Clone</title><link>https://dk3156.github.io/dongje.kim/projects/amazon/</link><pubDate>Thu, 03 Aug 2023 00:00:00 +0000</pubDate><guid>https://dk3156.github.io/dongje.kim/projects/amazon/</guid><description>Cloned part of Amazon UI and created custom version of web application for package delivery system. Created with Express.js, Node.js, MongoDB, HTML, CSS. Deployed through Render.
MongoDB collection is linked to the express server, allowing objects in the shopping cart to be added and removed remotely. User can checkout through checkout page that updates respective to the products in the database. User can view delivery status of each item purchased through return and orders webpage.</description></item><item><title>Hugo &amp; Github pages</title><link>https://dk3156.github.io/dongje.kim/blog/first/</link><pubDate>Mon, 17 Jul 2023 00:00:00 +0000</pubDate><guid>https://dk3156.github.io/dongje.kim/blog/first/</guid><description>These are some errors / solutions / conjecture that I encountered when making hugo website.
Error_1 Submodule url
I had to delete original repo for my portfolio website and create a whole new repo because of this error. (Original website at dk3156.github.io)
For build and deploy site, github action give out error for not able to find anatole theme repo. In hugo, themes are not the local files created inside your local files.</description></item><item><title>gallatin</title><link>https://dk3156.github.io/dongje.kim/projects/gallatin/</link><pubDate>Wed, 03 May 2023 00:00:00 +0000</pubDate><guid>https://dk3156.github.io/dongje.kim/projects/gallatin/</guid><description>Gallatin is a web application that exports playlists into users&amp;rsquo; spotify account using machine learning algorithm. Playlist is determined by user&amp;rsquo;s preference on song&amp;rsquo;s emotion and user&amp;rsquo;s current location / weather factors. It is built with Python frameworks (scikit-learn, numpy, Flask) and external APIs (Spotify API, OpenWeather API). It maps songs to a specific emotion from four categories &amp;ndash; anger, happiness, sadness, and relaxed.
Gallatin uses OpenWeather API to check the weather of the user&amp;rsquo;s current location Gallatin collect training data from Spotify song objects (including danceability, valence, energy, etc) Gallatin prepares a classification machine learning algorithm by using scikit-learn and numpy library to train the model to correlate different weather factors to a specific emotion.</description></item><item><title>Polytechnic Tutoring Center</title><link>https://dk3156.github.io/dongje.kim/experience/work/ptc/</link><pubDate>Thu, 01 Sep 2022 00:00:00 +0000</pubDate><guid>https://dk3156.github.io/dongje.kim/experience/work/ptc/</guid><description>2022 - 2023 Tutored students for Object-Oriented Programming, Data Structures, and Intro To Programming course at Polytechnic Tutoring Center, 2 Metrotech NYU, Brooklyn. Used three programming languages: C, C++ and Python. Tutored in large group settings and provided exam review / homework assistance in-person.
Take a look at my tutoring materials:
CS1114 - Intro to Programming Mock exam reviews for Fall 2022 semester
Exam 1 Exam 2 Exam 3
CS1134 - Data Structures and Algorithm For Fall 2022, Spring 2023</description></item><item><title>Army</title><link>https://dk3156.github.io/dongje.kim/experience/work/army/</link><pubDate>Wed, 23 Aug 2017 00:00:00 +0000</pubDate><guid>https://dk3156.github.io/dongje.kim/experience/work/army/</guid><description>From Aug 2017 to May 2019
Served in the Eighth Army Public Affairs Office as videographer and photographer.
Main duty includes social media content creation such as designing Facebook, Youtube, and Twitter posts as well as directing and editing weekly video contents for the Eighth Army social media. Served as a videographer and photographer for various army events, such as commemoration ceremony and ROK-US Combined Forces trainings, in the U.S. Army Garrisons Humphreys.</description></item><item><title/><link>https://dk3156.github.io/dongje.kim/skills/skill/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dk3156.github.io/dongje.kim/skills/skill/</guid><description/></item><item><title>Disney Plus Clone</title><link>https://dk3156.github.io/dongje.kim/projects/disney/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dk3156.github.io/dongje.kim/projects/disney/</guid><description>Inspired by a youtuber&amp;rsquo;s Disney-Plus-Clone ReactJS Challenge, created a streaming platform UI with videos and films I have made in the past. (Redux, React JS)
Currently work in progress.
github: https://github.com/dk3156/disney-plus-mock</description></item><item><title>DSA Homework</title><link>https://dk3156.github.io/dongje.kim/experience/dsa/dsahw/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dk3156.github.io/dongje.kim/experience/dsa/dsahw/</guid><description>HW 1
HW 2
HW 3
HW 4
HW 5
HW 6
HW 7</description></item><item><title>DSA lab 1</title><link>https://dk3156.github.io/dongje.kim/experience/dsa/labs/lab1/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dk3156.github.io/dongje.kim/experience/dsa/labs/lab1/</guid><description>Download problem set
Answer for Coding Questions #QUESTION 1 Apples = [a = 1, p = 2, l =1, e = 1, s =1] Apls [a = 1, p=1, l=1, s=1] def can_construct(word, letters): letters_lst = [-1] * 26 #We create a list with a length of 26 with each index representing one character for char in letters: if letters_lst[ord(char)-97] == -1: #We offset by 97 because the ascii values of lowercase letters start from 97 letters_lst[ord(char)-97] = 0 letters_lst[ord(char)-97] += 1 for char in word: if letters_lst[ord(char)-97] == -1: #a letter of the word is not in letters return False if letters_lst[ord(char)-97] &amp;lt; 1: #not enough of the same letters for the word return False letters_lst[ord(char)-97] -= 1 #character is in the word so we &amp;#34;use&amp;#34; it by reducing the count by 1 return True #confirmed that each the letters are enough to create the word #QUESTION 2 class Complex: #a + bi def __init__(self, a, b): self.</description></item><item><title>DSA lab 10</title><link>https://dk3156.github.io/dongje.kim/experience/dsa/labs/lab10/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dk3156.github.io/dongje.kim/experience/dsa/labs/lab10/</guid><description>Problem set is not available.
Answer for Coding Questions from DoublyLinkedList import * class LinkedStack: def __init__(self): self.data = DoublyLinkedList() def __len__(self): &amp;#39;&amp;#39;&amp;#39; Returns the number of elements in the stack. &amp;#39;&amp;#39;&amp;#39; return len(self.data) def is_empty(self): &amp;#39;&amp;#39;&amp;#39; Returns true if the stack is empty,false otherwise. &amp;#39;&amp;#39;&amp;#39; return self.data.is_empty() def push(self, e): &amp;#39;&amp;#39;&amp;#39; Adds an element, e, to the top of the stack. &amp;#39;&amp;#39;&amp;#39; self.data.add_first(e) def top(self): &amp;#39;&amp;#39;&amp;#39; Returns the element at the top of the stack.</description></item><item><title>DSA lab 10</title><link>https://dk3156.github.io/dongje.kim/experience/dsa/labs/lab12/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dk3156.github.io/dongje.kim/experience/dsa/labs/lab12/</guid><description>Problem set is not available.
Answer for Coding Questions from LinkedBinaryTree import * def bt_even_sum(root): if(root == None): return 0 val = bt_even_sum(root.left)+bt_even_sum(root.right) if(root.data % 2 == 0): return root.data + val else: return val def bt_contains(root,val): if(root == None): return False if(root.data == val): return True else: return (bt_contains(root.left, val) or bt_contains(root.right, val)) def add_bts(root1, root2): &amp;#39;&amp;#39;&amp;#39; Creates a new binary tree merging tree1 and tree2 and returns its root.</description></item><item><title>DSA lab 2</title><link>https://dk3156.github.io/dongje.kim/experience/dsa/labs/lab2/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dk3156.github.io/dongje.kim/experience/dsa/labs/lab2/</guid><description>Download problem set
Answer for Coding Questions &amp;#39;&amp;#39;&amp;#39; Use the board to explain the process for these solutions &amp;#39;&amp;#39;&amp;#39; class Polynomial: def __init__(self, lst): self.data = lst def __call__(self, val): #val = x, x^power * coefficient return sum([(val**i)*self.data[i] for i in range(len(self.data))]) def __add__(self, other): lst = self.data.copy() temp = other.data.copy() if len(lst) &amp;gt; len(temp): lst, temp = temp, lst #have lst be the shorter one while len(lst) &amp;lt; len(temp): #extend lst (the shorter one) with 0&amp;#39;s lst.</description></item><item><title>DSA lab 3</title><link>https://dk3156.github.io/dongje.kim/experience/dsa/labs/lab3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dk3156.github.io/dongje.kim/experience/dsa/labs/lab3/</guid><description>Download problem set
Answer for Coding Questions import random #1a #explain traversal using variables that reference indices/ random access def reverse(lst): low = 0 high = len(lst) - 1 while low &amp;lt; high: #or, for i in range(len(lst)//2) lst[low], lst[high] = lst[high], lst[low] #swap low += 1 high -= 1 #simplified def reverse2(lst): for i in range(len(lst)//2): lst[i], lst[len(lst) - 1 - i] = lst[len(lst) - 1 - i], lst[i] &amp;#39;&amp;#39;&amp;#39; lst = [1, 2, 3, 4, 5, 6, 7] lst2 = [1, 2, 3, 4, 5, 6, 7, 8] reverse(lst) print(lst) reverse2(lst) print(lst) reverse(lst2) print(lst2) reverse2(lst2) print(lst2) &amp;#39;&amp;#39;&amp;#39; #1b def reverse_list(lst, low = None, high = None): if low is None: low = 0 if high is None: high = len(lst)-1 while low &amp;lt; high: lst[low], lst[high] = lst[high], lst[low] #swap low += 1 high -= 1 #2 def move_zeroes(nums): last_zero = 0 #keep track of the last zero for i in range(len(nums)): #use i to traverse through the list, if nums[i] !</description></item><item><title>DSA lab 4</title><link>https://dk3156.github.io/dongje.kim/experience/dsa/labs/lab4/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dk3156.github.io/dongje.kim/experience/dsa/labs/lab4/</guid><description>Download problem set
Answer for Coding Questions #1 def is_palindrome(s): left = 0 right = len(s) - 1 while left &amp;lt; right: #or while left &amp;lt; right if s[left] != s[right]: return False left += 1 right -= 1 return True #simplified def is_palindrome2(s): for i in range(len(s)//2): if s[i] != s[len(s)-1 - i]: #or ss[-1 -i] return False return True #2 def reverse_vowels(input_str): left = 0 right = len(input_str) - 1 vowels = &amp;#34;aeiou&amp;#34; lst = list(input_str) #linear while left &amp;lt; right: #can&amp;#39;t use for loop because you don&amp;#39;t know where vowels are placed if lst[left] in vowels and lst[right] in vowels: lst[left], lst[right] = lst[right], lst[left] left += 1 right -= 1 if lst[left] not in vowels: left += 1 if lst[right] not in vowels: right -= 1 return &amp;#34;&amp;#34;.</description></item><item><title>DSA lab 5</title><link>https://dk3156.github.io/dongje.kim/experience/dsa/labs/lab5/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dk3156.github.io/dongje.kim/experience/dsa/labs/lab5/</guid><description>Download problem set
Answer for Coding Questions # Coding Question import ctypes # provides low-level arrays def make_array(n): return (n * ctypes.py_object)() #Start Code, except for #g class ArrayList: def __init__(self, iter_collection = None): self.data = make_array(1) self.n = 0 self.capacity = 1 #g if iter_collection is not None: for elem in iter_collection: self.append(elem) def append(self, val): if(self.n == self.capacity): self.resize(2 * self.capacity) self.data[self.n] = val self.n += 1 def resize(self, new_size): new_arr = make_array(new_size) for i in range(self.</description></item><item><title>DSA lab 6</title><link>https://dk3156.github.io/dongje.kim/experience/dsa/labs/lab6/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dk3156.github.io/dongje.kim/experience/dsa/labs/lab6/</guid><description>Problem set is not available.
Answer for Coding Questions def sum_to(n): if(n &amp;lt;= 0): return 0 sum = sum_to(n-1) sum += n return sum print(sum_to(100)) def product_evens(n): if(n &amp;lt;= 0): return 1 product = product_evens(n-2) return product*n print(product_evens(8)) def find_max(lst,low = 0 ,high = None): if(high == None): high = len(lst)-1 if(low == high): return lst[low] max_num = max(lst[low], find_max(lst,low+1,high)) return max_num print(find_max([13, 9, 16, 3, 4, 2])) def is_palindrome(input_str, low, high): if(low &amp;gt;= high): return True prev = is_palindrome(input_str, low+1, high-1) return (input_str[low] == input_str[high]) and prev print(is_palindrome(&amp;#34;racecar&amp;#34;, 0, 6)) print(is_palindrome(&amp;#34;racecar&amp;#34;, 1, 5)) print(is_palindrome(&amp;#34;racecar&amp;#34;, 1, 3)) def binary_search(lst, low, high, val): if(low &amp;gt; high): return None mid = (low+high)//2 if(lst[mid] &amp;gt; val): return binary_search(lst,low,mid-1, val) elif(lst[mid] &amp;lt; val): return binary_search(lst,mid+1, high, val) else: return mid lst = [i for i in range(0,50)] print(binary_search(lst,0,len(lst)-1,49)) print(binary_search(lst,0,len(lst)-1,20)) print(binary_search(lst,0,len(lst)-1,10)) print(binary_search(lst,0,len(lst)-1,31)) def vc_count(word, low, high): vowels = &amp;#34;aeiouAEIOU&amp;#34; if(low &amp;gt; high): return (0,0) prev = vc_count(word,low+1,high) if(word[low] in vowels): return (prev[0]+1, prev[1]) return (prev[0], prev[1]+1) word = &amp;#34;NYUTandonEngineering&amp;#34; print(vc_count(word, 0, len(word)-1))</description></item><item><title>DSA lab 7</title><link>https://dk3156.github.io/dongje.kim/experience/dsa/labs/lab7/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dk3156.github.io/dongje.kim/experience/dsa/labs/lab7/</guid><description>Problem set is not available.
Answer for Coding Questions def find_min(lst,low,high): if(low == high): return lst[low] return min(find_min(lst,low+1,high), lst[low]) def find_second_min(lst): return find_second_min_helper(lst,0,len(lst)-1)[1] def find_second_min_helper(lst,low,high): if(low == high): return [lst[low],None] res = find_second_min_helper(lst,low+1,high) if(lst[low] &amp;lt; res[0]): holder = res[0] res[0] = lst[low] res[1] = holder elif(res[1] == None or lst[low] &amp;lt; res[1]): res[1] = lst[low] return res def quick_select(lst, low, high, k): if(len(lst) == 0): return None pivot = lst[-1] # print(pivot) left = [i for i in lst if(i &amp;lt; pivot)] right = [i for i in lst if(i &amp;gt; pivot)] if(low+len(left)+1 == k): return pivot else: resL = quick_select(left, low, high-len(right)+1,k) resR = quick_select(right, low+len(left)+1, high, k) if(resL == resR): return None else: if(resL !</description></item><item><title>DSA lab 8</title><link>https://dk3156.github.io/dongje.kim/experience/dsa/labs/lab8/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dk3156.github.io/dongje.kim/experience/dsa/labs/lab8/</guid><description>Download problem set
Answer for Coding Questions from stack import * def stack_sum(s): res = 0 holder = ArrayStack() while(not s.is_empty()): val = s.pop() res += val holder.push(val) while(not holder.is_empty()): s.push(holder.pop()) return res def eval_prefix(exp_str): &amp;#34;&amp;#34;&amp;#34; : exp type: str : return type: int &amp;#34;&amp;#34;&amp;#34; exp_lst = exp_str.split() s = ArrayStack() exp = &amp;#34;+*/-&amp;#34; print(&amp;#39;hi&amp;#39;) for i in range(len(exp_lst)-1,-1,-1): if exp_lst[i] in exp: num1 = int(s.pop()) num2 = int(s.pop()) if(exp_lst[i] == &amp;#34;*&amp;#34;): s.</description></item><item><title>DSA lab 9</title><link>https://dk3156.github.io/dongje.kim/experience/dsa/labs/lab9/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dk3156.github.io/dongje.kim/experience/dsa/labs/lab9/</guid><description>Problem set is not available.
Answer for Coding Questions from ArrayQueue import * class ArrayDeque: INITIAL_CAPACITY = 8 def __init__(self): self.data = make_array(ArrayQueue.INITIAL_CAPACITY) self.num_of_elems = 0 self.front_ind = None def __len__(self): return self.num_of_elems def is_empty(self): return (self.num_of_elems == 0) def enqueue_last(self, elem): if (self.num_of_elems == len(self.data)): self.resize(2 * len(self.data)) if (self.is_empty()): self.data[0] = elem self.front_ind = 0 self.num_of_elems += 1 else: back_ind = (self.front_ind + self.num_of_elems) % len(self.data) self.data[back_ind] = elem self.</description></item><item><title>DSA Labs</title><link>https://dk3156.github.io/dongje.kim/experience/dsa/dsalab/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dk3156.github.io/dongje.kim/experience/dsa/dsalab/</guid><description>Lab 1
Lab 2
Lab 3
Lab 4
Lab 5
Lab 6
Lab 7
Lab 8
Lab 9
Lab 10
Lab 12</description></item><item><title>HW1</title><link>https://dk3156.github.io/dongje.kim/experience/dsa/homeworks/hw1/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dk3156.github.io/dongje.kim/experience/dsa/homeworks/hw1/</guid><description>Download problem set
Answers Q2 # part a def shift(lst, k): lst = lst[k:]+lst[:k] # part b def shift2(lst, k, dir = &amp;#39;left&amp;#39;): if dir == &amp;#39;right&amp;#39;: k = len(lst) - k lst[:] = lst[k:]+lst[:k] def main(): lst = [1, 2, 3, 4, 5, 6] shift(lst, 2) print(lst) lst2 = [1, 2, 3, 4, 5, 6] shift2(lst2, 2, &amp;#39;right&amp;#39;) print(lst2) lst1 = [1,2,3] lst2 = lst1[1:] print(lst1) print(lst2) main() Q3 # part a def sum_sqr(n): result = 0 for i in range(1, n): result += i**2 return result # part b sum([i**2 for i in range(1, n)]) # part c def sum_odd(n): result = 0 for i in range(1, n): if i%2 == 1: result += i**2 return result # part d sum([i**2 for i in range(1, n) if i%2 == 1]) Q4 # part a [ 10**i for i in range(6) ] # part b [ i*(i+1) for i in range(10) ] # part c [ chr(i) for i in range(ord(&amp;#39;a&amp;#39;),ord(&amp;#39;z&amp;#39;)+1) ] Q5 # part a [ 10**i for i in range(6) ] # part b [ i*(i+1) for i in range(10) ] # part c [ chr(i) for i in range(ord(&amp;#39;a&amp;#39;),ord(&amp;#39;z&amp;#39;)+1) ] Q6 def fibs(n): first = 0 second = 1 yield 1 for i in range(n-1): result = first + second first = second second = result yield result def main(): for curr in fibs(8): print(curr, end=&amp;#34; &amp;#34;) #main() Q7 class Vector: # part a def __init__(self, d): if isinstance(d,int) == True: self.</description></item><item><title>HW1</title><link>https://dk3156.github.io/dongje.kim/experience/oop/homeworks/oop_hw1/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dk3156.github.io/dongje.kim/experience/oop/homeworks/oop_hw1/</guid><description>Answers // // hw01.cpp // // Created by DJ on 2/2/22. // Copyright © 2022 DJ. All rights reserved. // This file reads an encrypted input file and decrypt it #include &amp;lt;iostream&amp;gt; #include &amp;lt;fstream&amp;gt; #include &amp;lt;vector&amp;gt; using namespace std; char convertChar (char, int); void convertString (string&amp;amp;, int); int main() { ifstream my_file(&amp;#34;encrypted.txt&amp;#34;); string line; int distance; vector&amp;lt;string&amp;gt; lines; my_file &amp;gt;&amp;gt; distance; //reads each line of the file and put it in a vector while (getline(my_file, line)){ lines.</description></item><item><title>HW2</title><link>https://dk3156.github.io/dongje.kim/experience/dsa/homeworks/hw2/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dk3156.github.io/dongje.kim/experience/dsa/homeworks/hw2/</guid><description>Download problem set
Answers Q3 import math def factors(num): for i in range(1, int(math.sqrt(num))+1): if num % i == 0: yield i for i in range(int(math.sqrt(num))-1, 0, -1): if num % i == 0: yield num // i def main(): for curr_factor in factors(100): print(curr_factor, end=&amp;#39; &amp;#39;) #main() Q4 def e_approx(n): res = 1 product = 1 for i in range(1, n+1): product *= i res += 1 / product return res def main(): for n in range(15): curr_approx = e_approx(n) approx_str = &amp;#34;{:.</description></item><item><title>HW2</title><link>https://dk3156.github.io/dongje.kim/experience/oop/homeworks/oop_hw2/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dk3156.github.io/dongje.kim/experience/oop/homeworks/oop_hw2/</guid><description>Answers Download warriors.txt
// // hw02.cpp // // Created by DJ on 2/10/22. // Copyright © 2022 DJ. All rights reserved. // This file reads warriors.txt and prints information about the warriors. // #include &amp;lt;iostream&amp;gt; #include &amp;lt;vector&amp;gt; #include &amp;lt;fstream&amp;gt; using namespace std; struct Warrior{ string name; int strength; }; void read_file(ifstream&amp;amp;); void create_warrior(string, int, vector&amp;lt;Warrior&amp;gt;&amp;amp;); size_t find_warrior_by_name(string, const vector&amp;lt;Warrior&amp;gt;&amp;amp;); size_t find_warrior(const Warrior&amp;amp;, const vector&amp;lt;Warrior&amp;gt;&amp;amp;); void battle(Warrior&amp;amp;, Warrior&amp;amp;); void show_status(vector&amp;lt;Warrior&amp;gt;&amp;amp;); int main() { //read the file and checks if the file exists.</description></item><item><title>HW3</title><link>https://dk3156.github.io/dongje.kim/experience/dsa/homeworks/hw3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dk3156.github.io/dongje.kim/experience/dsa/homeworks/hw3/</guid><description>Download problem set
Answers Q2 import ctypes # provides low-level arrays def make_array(n): return (n * ctypes.py_object)() class ArrayList: def __init__(self): self.data = make_array(1) self.capacity = 1 self.n = 0 def __len__(self): return self.n def append(self, val): if (self.n == self.capacity): self.resize(2 * self.capacity) self.data[self.n] = val self.n += 1 def resize(self, new_size): new_array = make_array(new_size) for i in range(self.n): new_array[i] = self.data[i] self.data = new_array self.capacity = new_size def extend(self, iter_collection): for elem in iter_collection: self.</description></item><item><title>HW3</title><link>https://dk3156.github.io/dongje.kim/experience/oop/homeworks/oop_hw3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dk3156.github.io/dongje.kim/experience/oop/homeworks/oop_hw3/</guid><description>Answers Download warriors.txt
// // main.cpp // hw03 // // Created by DJ on 2/16/22. // This file reads warriors.txt and prints information about the warriors. // #include &amp;lt;iostream&amp;gt; #include &amp;lt;vector&amp;gt; #include &amp;lt;fstream&amp;gt; using namespace std; class Warrior{ friend ostream&amp;amp; operator&amp;lt;&amp;lt; (ostream&amp;amp; os, const Warrior&amp;amp; rhs){ os &amp;lt;&amp;lt; &amp;#34;Warrior: &amp;#34; &amp;lt;&amp;lt; rhs.name &amp;lt;&amp;lt; &amp;#34;, &amp;#34; &amp;lt;&amp;lt; rhs.weapon; return os; } class Weapon{ friend ostream&amp;amp; operator&amp;lt;&amp;lt; (ostream&amp;amp; os, const Weapon&amp;amp; rhs){ os &amp;lt;&amp;lt; &amp;#34;weapon: &amp;#34; &amp;lt;&amp;lt; rhs.</description></item><item><title>HW4</title><link>https://dk3156.github.io/dongje.kim/experience/dsa/homeworks/hw4/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dk3156.github.io/dongje.kim/experience/dsa/homeworks/hw4/</guid><description>Download problem set
Answers Q3 def print_triangle(n): if(n &amp;lt;= 1): print(&amp;#34;*&amp;#34;) return print_triangle(n-1) print(&amp;#34;*&amp;#34;*n) def print_oposite_triangles(n): if(n &amp;lt;= 0): return print(&amp;#34;*&amp;#34;*n) print_oposite_triangles(n-1) print(&amp;#34;*&amp;#34;*n) def print_ruler(n): if(n &amp;lt;= 1): print(&amp;#34;-&amp;#34;) return print_ruler(n-1) print(&amp;#34;- &amp;#34;*n) print_ruler(n-1) # print_triangle(4) # print_oposite_triangles(4) # print_ruler(4) Q4 def list_min(lst, low, high): if(low == high): return lst[low] prev = list_min(lst,low+1,high) return min(lst[low], prev) # l = [2,2,3,1,5,6,7,8] # print(list_min(l, 0, len(l)-1)) Q5 def count_lowercase(s, low, high): if(low == high): return 1 if s[low].</description></item><item><title>HW4</title><link>https://dk3156.github.io/dongje.kim/experience/oop/homeworks/oop_hw4/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dk3156.github.io/dongje.kim/experience/oop/homeworks/oop_hw4/</guid><description>Answers Download hw4_output.txt
/* testNobleWarrior.cpp John Sterling Association: Noble - Warrior Test code for hw04 author: Dongje Kim */ #include &amp;lt;iostream&amp;gt; #include &amp;lt;vector&amp;gt; #include &amp;lt;string&amp;gt; using namespace std; /* * This class represents warrior. * member variable: name and strength */ class Warrior{ friend ostream&amp;amp; operator&amp;lt;&amp;lt; (ostream&amp;amp; os, const Warrior* rhs){ os &amp;lt;&amp;lt; rhs-&amp;gt;name &amp;lt;&amp;lt; &amp;#34;: &amp;#34; &amp;lt;&amp;lt; rhs-&amp;gt;strength; return os; } public: //constructor Warrior(const string&amp;amp; name, double strength): name(name), strength(strength){} //below are two methods that return name and strength of the warrior object.</description></item><item><title>HW5</title><link>https://dk3156.github.io/dongje.kim/experience/dsa/homeworks/hw5/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dk3156.github.io/dongje.kim/experience/dsa/homeworks/hw5/</guid><description>Download problem set
Answers Q1 from ArrayStack import * def postfix_translator(tokens,variables): numbers = ArrayStack() ops = &amp;#34;+-/*&amp;#34; for i in tokens: if i in ops: num2 = numbers.pop() num1 = numbers.pop() result = None if(i == &amp;#34;+&amp;#34;): result = num1+num2 elif(i == &amp;#34;-&amp;#34;): result = num1-num2 elif(i == &amp;#34;*&amp;#34;): result = num1*num2 else: result = num1/num2 numbers.push(result) else: if(i in variables): current_num = variables[i] else: current_num = int(i) numbers.push(current_num) return numbers.</description></item><item><title>HW5</title><link>https://dk3156.github.io/dongje.kim/experience/oop/homeworks/oop_hw5/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dk3156.github.io/dongje.kim/experience/oop/homeworks/oop_hw5/</guid><description>Answers Download hw5_output.txt
// // main.cpp // hw05 // // Created by DJ on 3/2/22. // Copyright © 2022 DJ. All rights reserved. // #include &amp;lt;iostream&amp;gt; #include &amp;lt;vector&amp;gt; #include &amp;lt;string&amp;gt; #include &amp;lt;fstream&amp;gt; using namespace std; /* * This class represents warrior. * member variable: name and strength */ class Warrior{ friend ostream&amp;amp; operator&amp;lt;&amp;lt; (ostream&amp;amp; os, const Warrior* rhs){ os &amp;lt;&amp;lt; rhs-&amp;gt;name &amp;lt;&amp;lt; &amp;#34;: &amp;#34; &amp;lt;&amp;lt; rhs-&amp;gt;strength; return os; } public: //constructor Warrior(const string&amp;amp; name, double strength): name(name), strength(strength){} //below are two methods that return name and strength of the warrior object.</description></item><item><title>HW6</title><link>https://dk3156.github.io/dongje.kim/experience/dsa/homeworks/hw6/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dk3156.github.io/dongje.kim/experience/dsa/homeworks/hw6/</guid><description>Download problem set
Answers Q1 from DoublyLinkedList import * class LinkedQueue: def __init__(self): self.data = DoublyLinkedList() def __len__(self): return len(self.data) def is_empty(self): return self.data.is_empty() def enqueue(self, elem): self.data.add_last(elem) def dequeue(self): if(self.is_empty()): raise Exception(&amp;#34;Queue is empty&amp;#34;) return self.data.delete_first() def first(self): if(self.is_empty()): raise Exception(&amp;#34;Queue is empty&amp;#34;) return self.data.header.next.data Q2 from DoublyLinkedList import * class Integer: def __init__(self, num_str): &amp;#39;&amp;#39;&amp;#39; Initializes an Integer object representing the value given in the string num_str&amp;#39;&amp;#39;&amp;#39; self.data = DoublyLinkedList() start = False for i in num_str: if not(i == &amp;#34;0&amp;#34;): start = True if(start == True ): self.</description></item><item><title>HW6</title><link>https://dk3156.github.io/dongje.kim/experience/oop/homeworks/oop_hw6/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dk3156.github.io/dongje.kim/experience/oop/homeworks/oop_hw6/</guid><description>Answers Download nobleWarrior.txt
Main.cpp // // main.cpp // hw06 // // Created by DJ on 4/12/22. // Copyright © 2022 DJ. All rights reserved. // #include &amp;#34;Noble.h&amp;#34; #include &amp;#34;Warrior.h&amp;#34; #include &amp;lt;iostream&amp;gt; #include &amp;lt;fstream&amp;gt; using namespace std; using namespace WarriorCraft; void read_file(); bool warrior(const string&amp;amp; name, const double strength, vector&amp;lt;Warrior*&amp;gt;&amp;amp; war_vec); bool noble(const string&amp;amp; name, vector&amp;lt;Noble*&amp;gt;&amp;amp; noble_vec); bool hire(const string&amp;amp; noble_name, const string&amp;amp; war_name, vector&amp;lt;Noble*&amp;gt;&amp;amp; noble_vec, vector&amp;lt;Warrior*&amp;gt;&amp;amp; war_vec); bool fire(const string&amp;amp; noble_name, const string&amp;amp; war_name, vector&amp;lt;Noble*&amp;gt;&amp;amp; noble_vec, vector&amp;lt;Warrior*&amp;gt;&amp;amp; war_vec); void status(const vector&amp;lt;Noble*&amp;gt;&amp;amp; noble_vec, const vector&amp;lt;Warrior*&amp;gt;&amp;amp; war_vec); bool battle(const string&amp;amp; name1, const string&amp;amp; name2, vector&amp;lt;Noble*&amp;gt;&amp;amp; noble_vec); void clear(vector&amp;lt;Noble*&amp;gt;&amp;amp; noble_vec, vector&amp;lt;Warrior*&amp;gt;&amp;amp; war_vec); size_t check_noble(const string&amp;amp;, vector&amp;lt;Noble*&amp;gt;&amp;amp;); size_t check_warrior(const string&amp;amp;, vector&amp;lt;Warrior*&amp;gt;&amp;amp;); int main() { read_file(); } void read_file(){ ifstream my_file(&amp;#34;nobleWarriors.</description></item><item><title>HW7</title><link>https://dk3156.github.io/dongje.kim/experience/dsa/homeworks/hw7/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dk3156.github.io/dongje.kim/experience/dsa/homeworks/hw7/</guid><description>Download problem set
Answers Q1 from LinkedBinaryTree import LinkedBinaryTree def min_and_max(bin_tree): def subtree_min_and_max(root): if(root == None): return None min_max = (root.data, root.data) left = subtree_min_and_max(root.left) right = subtree_min_and_max(root.right) if(left is not None): min_max = (min(min_max[0],left[0]), max(min_max[1], left[1]) ) if(right is not None): min_max = (min(min_max[0],right[0]), max(min_max[1], right[1]) ) # print(min_max) return min_max if(bin_tree is None): raise Exception(&amp;#34;None Input&amp;#34;) if(bin_tree.is_empty()): raise Exception(&amp;#34;Tree is empty&amp;#34;) return subtree_min_and_max(bin_tree.root) Q2 from ArrayQueue import ArrayQueue class LinkedBinaryTree: class Node: def __init__(self, data, left=None, right=None): self.</description></item><item><title>HW7</title><link>https://dk3156.github.io/dongje.kim/experience/oop/homeworks/oop_hw7/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dk3156.github.io/dongje.kim/experience/oop/homeworks/oop_hw7/</guid><description>Answers Main.cpp // // main.cpp // hw07 // // Created by DJ on 4/13/22. // #include &amp;#34;Noble.h&amp;#34; #include &amp;#34;Protector.h&amp;#34; #include &amp;lt;iostream&amp;gt; #include &amp;lt;fstream&amp;gt; using namespace std; using namespace WarriorCraft; int main() { Lord sam(&amp;#34;Sam&amp;#34;); Archer samantha(&amp;#34;Samantha&amp;#34;, 200); sam.hires(samantha); Lord joe(&amp;#34;Joe&amp;#34;); PersonWithStrengthToFight randy(&amp;#34;Randolf the Elder&amp;#34;, 250); joe.battle(randy); joe.battle(sam); Lord janet(&amp;#34;Janet&amp;#34;); Swordsman hardy(&amp;#34;TuckTuckTheHardy&amp;#34;, 100); Swordsman stout(&amp;#34;TuckTuckTheStout&amp;#34;, 80); janet.hires(hardy); janet.hires(stout); PersonWithStrengthToFight barclay(&amp;#34;Barclay the Bold&amp;#34;, 300); janet.battle(barclay); janet.hires(samantha); Archer pethora(&amp;#34;Pethora&amp;#34;, 50); Archer thora(&amp;#34;Thorapleth&amp;#34;, 60); Wizard merlin(&amp;#34;Merlin&amp;#34;, 150); janet.</description></item><item><title>HW8</title><link>https://dk3156.github.io/dongje.kim/experience/oop/homeworks/oop_hw8/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dk3156.github.io/dongje.kim/experience/oop/homeworks/oop_hw8/</guid><description>Answers Polynomial.cpp // // hw08.cpp // hw08 // // Created by DJ on 5/1/22. // #include &amp;#34;polynomial.h&amp;#34; #include &amp;lt;iostream&amp;gt; #include &amp;lt;vector&amp;gt; using namespace std; ostream&amp;amp; operator&amp;lt;&amp;lt;(ostream&amp;amp; os, const Polynomial&amp;amp; rhs){ Polynomial::Node* rhs_ptr = rhs.head_ptr; size_t degree = rhs.degree; while(rhs_ptr != nullptr){ int data = rhs_ptr-&amp;gt;data; if(data != 0){ if(degree == 0){ os &amp;lt;&amp;lt; data; } else if (degree == 1){ if(data == 1){ os &amp;lt;&amp;lt; &amp;#34;x + &amp;#34;; } else if (data == -1){ os &amp;lt;&amp;lt; &amp;#34;-x + &amp;#34;; } else { os &amp;lt;&amp;lt; data &amp;lt;&amp;lt; &amp;#34;x + &amp;#34;; } } else { if (data == 1){ os &amp;lt;&amp;lt; &amp;#34;x^&amp;#34; &amp;lt;&amp;lt; degree &amp;lt;&amp;lt; &amp;#34; + &amp;#34;; } else if (data == -1){ os &amp;lt;&amp;lt; &amp;#34;-x^&amp;#34; &amp;lt;&amp;lt; degree &amp;lt;&amp;lt; &amp;#34; + &amp;#34;; } else { os &amp;lt;&amp;lt; data &amp;lt;&amp;lt; &amp;#34;x^&amp;#34; &amp;lt;&amp;lt; degree &amp;lt;&amp;lt; &amp;#34; + &amp;#34;; } } } --degree; rhs_ptr = rhs_ptr-&amp;gt;next; } return os; } Polynomial::Polynomial(): degree(0){ head_ptr = new Node(); } Polynomial::Polynomial(vector&amp;lt;int&amp;gt; coeff){ head_ptr = new Node(coeff[0]); Node* cur = head_ptr; for(size_t i = 1; i &amp;lt; coeff.</description></item><item><title>Lab1</title><link>https://dk3156.github.io/dongje.kim/experience/oop/labs/oop_lab1/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dk3156.github.io/dongje.kim/experience/oop/labs/oop_lab1/</guid><description>Answers /* rec01_start.cpp spring 2022 jbs */ #include&amp;lt;iostream&amp;gt; #include&amp;lt;fstream&amp;gt; #include&amp;lt;vector&amp;gt; // Task 15. Function to display a vector of ints void printVector(std::vector&amp;lt;int&amp;gt; vec1){ std::string display; for(int i: vec1){ display += std::to_string(i) + &amp;#34; &amp;#34;; } std::cout&amp;lt;&amp;lt;display&amp;lt;&amp;lt;std::endl; } // Task 16. Function to modify the vector, using indices void doubleVector(std::vector&amp;lt;int&amp;gt; vec1){ std::string display; for(size_t i = 0; i &amp;lt; vec1.size(); ++i){ vec1[i] = vec1[i]*2; } for(int i: vec1){ display += std::to_string(i) + &amp;#34; &amp;#34;; } std::cout&amp;lt;&amp;lt;display&amp;lt;&amp;lt;std::endl; } // Task 17.</description></item><item><title>Lab10</title><link>https://dk3156.github.io/dongje.kim/experience/oop/labs/oop_lab10/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dk3156.github.io/dongje.kim/experience/oop/labs/oop_lab10/</guid><description>Answers starter.cpp
/* rec11-starter.cpp Test code for students to use for the linked list basics recitation. */ #include &amp;lt;iostream&amp;gt; #include &amp;lt;string&amp;gt; #include &amp;lt;vector&amp;gt; #include &amp;lt;unordered_set&amp;gt; using namespace std; #include &amp;lt;cstdlib&amp;gt; // // From linked list library in the course&amp;#39;s sample code // struct Node { Node(int data = 0, Node* next = nullptr) : data(data), next(next) {} int data; Node* next; }; // // Solution to recitation goes here: // (const on Node* is optional) // Inserts the list toSplice after prior.</description></item><item><title>Lab11</title><link>https://dk3156.github.io/dongje.kim/experience/oop/labs/oop_lab11/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dk3156.github.io/dongje.kim/experience/oop/labs/oop_lab11/</guid><description>Answers Download linked_list_basics.pdf
/* rec10_start.cpp Starting code 22S */ #include &amp;lt;iostream&amp;gt; #include &amp;lt;vector&amp;gt; using namespace std; class Instrument { public: virtual void makeSound() const = 0; virtual void normalPlay() const = 0; }; void Instrument::makeSound() const{ cout &amp;lt;&amp;lt; &amp;#34;To make a sound... &amp;#34;; } class Percussion : public Instrument{ public: void makeSound() const { Instrument::makeSound(); cout &amp;lt;&amp;lt; &amp;#34;hit me!&amp;#34;&amp;lt;&amp;lt; endl;} }; class Drum : public Percussion { public: void normalPlay() const {cout &amp;lt;&amp;lt; &amp;#34;Boom&amp;#34; &amp;lt;&amp;lt; endl;} }; class Cymbal : public Percussion { public: void normalPlay() const {cout &amp;lt;&amp;lt; &amp;#34;Crash&amp;#34; &amp;lt;&amp;lt; endl;} }; class Brass : public Instrument{ public: Brass(unsigned piece): mouthpiece(piece){} void makeSound() const { Instrument::makeSound(); cout &amp;lt;&amp;lt; &amp;#34;blow on a mouthpiece of size &amp;#34; &amp;lt;&amp;lt; mouthpiece &amp;lt;&amp;lt; endl;} private: unsigned mouthpiece; }; class Trombone : public Brass{ public: Trombone(unsigned piece): Brass(piece){} void normalPlay() const {cout &amp;lt;&amp;lt; &amp;#34;Blat&amp;#34; &amp;lt;&amp;lt; endl;} }; class Trumpet : public Brass{ public: Trumpet(unsigned piece): Brass(piece){} void normalPlay() const {cout &amp;lt;&amp;lt; &amp;#34;Toot&amp;#34; &amp;lt;&amp;lt; endl;} }; class String : public Instrument{ public: String(unsigned pitch): pitch(pitch){} void makeSound() const { Instrument::makeSound(); cout &amp;lt;&amp;lt; &amp;#34;bow a string with pitch &amp;#34; &amp;lt;&amp;lt; pitch &amp;lt;&amp;lt; endl;} private: unsigned pitch; }; class Violin : public String{ public: Violin(unsigned pitch): String(pitch){} void normalPlay() const {cout &amp;lt;&amp;lt; &amp;#34;Screech&amp;#34; &amp;lt;&amp;lt; endl;} }; class Cello : public String{ public: Cello(unsigned pitch): String(pitch){} void normalPlay() const {cout &amp;lt;&amp;lt; &amp;#34;Squawk&amp;#34; &amp;lt;&amp;lt; endl;} }; class MILL { public: void receiveInstr(Instrument&amp;amp; instr){ instr.</description></item><item><title>Lab12</title><link>https://dk3156.github.io/dongje.kim/experience/oop/labs/oop_lab12/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dk3156.github.io/dongje.kim/experience/oop/labs/oop_lab12/</guid><description>Answers // // main.cpp // rec12 // // Created by DJ on 4/22/22. // #include &amp;lt;cstdlib&amp;gt; #include &amp;lt;iostream&amp;gt; using namespace std; class List { friend ostream&amp;amp; operator&amp;lt;&amp;lt;(ostream&amp;amp; os, const List&amp;amp; rhs){ os &amp;lt;&amp;lt; &amp;#34;Outputting the list: &amp;#34; &amp;lt;&amp;lt; endl; Node* temp = rhs.header-&amp;gt;next; while(temp != rhs.trailer){ os &amp;lt;&amp;lt; temp-&amp;gt;data &amp;lt;&amp;lt; &amp;#39; &amp;#39;; temp = temp-&amp;gt;next; } return os; } struct Node{ Node(int data = 0, Node* next = nullptr, Node* prior = nullptr): data(data), next(next), prior(prior){} int data; Node* next; Node* prior; }; public: class Iterator{ public: friend bool operator==(const List::Iterator&amp;amp; lhs, const List::Iterator&amp;amp; rhs){ return lhs.</description></item><item><title>Lab13</title><link>https://dk3156.github.io/dongje.kim/experience/oop/labs/oop_lab13/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dk3156.github.io/dongje.kim/experience/oop/labs/oop_lab13/</guid><description>Answers // rec13_test.cpp #include &amp;lt;iostream&amp;gt; #include &amp;lt;fstream&amp;gt; #include &amp;lt;vector&amp;gt; // task 1 #include &amp;lt;list&amp;gt; // task 2 #include &amp;lt;algorithm&amp;gt; // task 3 #include &amp;lt;string&amp;gt; // task 21 #include &amp;lt;set&amp;gt; // task 22 #include &amp;lt;map&amp;gt; // task 23 using namespace std; list&amp;lt;int&amp;gt;::iterator ourFind(list&amp;lt;int&amp;gt;::iterator start, list&amp;lt;int&amp;gt;::iterator end, int target){ while (start != end){ if(*iter == target){ return start; } ++start; } return end; } template &amp;lt;typename Iter, typename val&amp;gt; /// two typenames Iter ourFind(Iter start, Iter end, val target) { while (start !</description></item><item><title>Lab14</title><link>https://dk3156.github.io/dongje.kim/experience/oop/labs/oop_lab14/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dk3156.github.io/dongje.kim/experience/oop/labs/oop_lab14/</guid><description>Answers tree.cpp #include &amp;lt;iostream&amp;gt; using namespace std; struct TNode { TNode(int data = 0, TNode *left = nullptr, TNode *right = nullptr) : data(data), left(left), right(right) {} int data; TNode *left, *right; }; struct Node{ Node(int data = 0, Node* next = nullptr): data(data), next(next){} int data; Node* next; }; //int max(TNode* root) { // // Provide this code //} bool recursive_even(int num){ if (num &amp;lt; 2) return num == 0; if (num % 2 == 0) return recursive_even(num / 2); return !</description></item><item><title>Lab2</title><link>https://dk3156.github.io/dongje.kim/experience/oop/labs/oop_lab2/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dk3156.github.io/dongje.kim/experience/oop/labs/oop_lab2/</guid><description>Answers // // main.cpp // rec02 // // Created by DJ on 2/4/22. // Copyright © 2022 DJ. All rights reserved. // #include &amp;lt;iostream&amp;gt; #include &amp;lt;fstream&amp;gt; #include &amp;lt;vector&amp;gt; using namespace std; struct Formula{ vector&amp;lt;string&amp;gt; names; int carb_num; int hydro_num; }; void openStream(ifstream&amp;amp;); void readFile(ifstream&amp;amp;, vector&amp;lt;Formula&amp;gt;&amp;amp;); void fillVec(vector&amp;lt;Formula&amp;gt;&amp;amp;, string, int, int); void sortVector(vector&amp;lt;Formula&amp;gt;&amp;amp;); void displayVector(vector&amp;lt;Formula&amp;gt;&amp;amp;); void printSingleFormula(Formula&amp;amp;); size_t find(vector&amp;lt;Formula&amp;gt;&amp;amp;, int, int); int main() { ifstream myFile; vector&amp;lt;Formula&amp;gt; carb_vec; openStream(myFile); readFile(myFile, carb_vec); sortVector(carb_vec); displayVector(carb_vec); return 0; } void printSingleFormula(const Formula&amp;amp; formula){ cout &amp;lt;&amp;lt; &amp;#34;C&amp;#34; &amp;lt;&amp;lt; formula.</description></item><item><title>Lab3</title><link>https://dk3156.github.io/dongje.kim/experience/oop/labs/oop_lab3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dk3156.github.io/dongje.kim/experience/oop/labs/oop_lab3/</guid><description>Answers /* rec03_start.cpp */ // Provided #include &amp;lt;iostream&amp;gt; #include &amp;lt;string&amp;gt; #include &amp;lt;vector&amp;gt; #include &amp;lt;fstream&amp;gt; using namespace std; // Task 1 // Define an Account struct struct Account{ string name; int number; }; // Task 2 // Define an Account class (use a different name than in Task 1) class Account2{ friend ostream&amp;amp; operator&amp;lt;&amp;lt;(ostream&amp;amp;, const Account2&amp;amp;); public: Account2(const string&amp;amp; the_name, const int&amp;amp; the_number): name(the_name), number(the_number){} const string&amp;amp; get_name() const {return name;} int get_number() const {return number;} private: string name; int number; }; // Task 3 // Define an Account (use a different name than in Task 1&amp;amp;2) and // Transaction classes class Transaction3{ friend ostream&amp;amp; operator&amp;lt;&amp;lt;(ostream&amp;amp;, const Transaction3&amp;amp;); public: Transaction3(int the_amount, int the_sign): amount(the_amount), sign(the_sign){} int get_amount() const {return amount;} int get_sign() const {return sign;} private: //amount of withdraw or deposit int amount; //if withdraw, -1, if deposit, +1 int sign; }; class Account3{ friend ostream&amp;amp; operator&amp;lt;&amp;lt;(ostream&amp;amp;, const Account3&amp;amp;); public: Account3(const string&amp;amp; the_name, int the_number): name(the_name), number(the_number){} void deposit(int amount){ trans.</description></item><item><title>Lab4</title><link>https://dk3156.github.io/dongje.kim/experience/oop/labs/oop_lab4/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dk3156.github.io/dongje.kim/experience/oop/labs/oop_lab4/</guid><description>Answers // // main.cpp // rec04 // // Created by DJ on 2/18/22. // Copyright © 2022 DJ. All rights reserved. // #include &amp;lt;iostream&amp;gt; #include &amp;lt;vector&amp;gt; using namespace std; class Colour { public: Colour(const string&amp;amp; name, unsigned r, unsigned g, unsigned b) : name(name), r(r), g(g), b(b) {} void display() const { cout &amp;lt;&amp;lt; name &amp;lt;&amp;lt; &amp;#34; (RBG: &amp;#34; &amp;lt;&amp;lt; r &amp;lt;&amp;lt; &amp;#34;,&amp;#34; &amp;lt;&amp;lt; g&amp;lt;&amp;lt; &amp;#34;,&amp;#34; &amp;lt;&amp;lt; b &amp;lt;&amp;lt; &amp;#34;)&amp;#34;; } private: string name; // what we call this colour unsigned r, g, b; // red/green/blue values for displaying }; class SpeakerSystem { public: void vibrateSpeakerCones(unsigned signal) const { cout &amp;lt;&amp;lt; &amp;#34;Playing: &amp;#34; &amp;lt;&amp;lt; signal &amp;lt;&amp;lt; &amp;#34;Hz sound.</description></item><item><title>Lab5</title><link>https://dk3156.github.io/dongje.kim/experience/oop/labs/oop_lab5/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dk3156.github.io/dongje.kim/experience/oop/labs/oop_lab5/</guid><description>Answers /* rec05-start.cpp */ #include &amp;lt;iostream&amp;gt; #include &amp;lt;string&amp;gt; #include &amp;lt;vector&amp;gt; using namespace std; class Section{ class Student{ friend ostream&amp;amp; operator&amp;lt;&amp;lt;(ostream&amp;amp; os, const Student&amp;amp; rhs){ os &amp;lt;&amp;lt; &amp;#34;Name: &amp;#34; &amp;lt;&amp;lt; rhs.name &amp;lt;&amp;lt; &amp;#34;, Grades: &amp;#34;; for (size_t i = 0; i &amp;lt; rhs.grades.size(); ++i){ os &amp;lt;&amp;lt; rhs.grades[i] &amp;lt;&amp;lt; &amp;#34; &amp;#34;; } return os; } public: Student(const string&amp;amp; name): name(name), grades(14,-1){} const string&amp;amp; get_name() const { return name; } void update_score(int score, int index){ grades[index-1] = score; } private: string name; vector&amp;lt;int&amp;gt; grades; }; class TimeSlot { friend ostream&amp;amp; operator&amp;lt;&amp;lt;(ostream&amp;amp; os, const TimeSlot&amp;amp; rhs){ os &amp;lt;&amp;lt; &amp;#34;[Day: &amp;#34; &amp;lt;&amp;lt; rhs.</description></item><item><title>Lab6</title><link>https://dk3156.github.io/dongje.kim/experience/oop/labs/oop_lab6/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dk3156.github.io/dongje.kim/experience/oop/labs/oop_lab6/</guid><description>Answers /* rec06_begin.cpp CS2124 Focus: Dynamic arrays and copy control */ #include &amp;lt;string&amp;gt; #include &amp;lt;iostream&amp;gt; using namespace std; // // Position class // class Position { friend ostream&amp;amp; operator&amp;lt;&amp;lt;(ostream&amp;amp; os, const Position&amp;amp; rhs) { os &amp;lt;&amp;lt; &amp;#39;[&amp;#39; &amp;lt;&amp;lt; rhs.title &amp;lt;&amp;lt; &amp;#39;,&amp;#39; &amp;lt;&amp;lt; rhs.salary &amp;lt;&amp;lt; &amp;#39;]&amp;#39;; return os; } public: Position(const string&amp;amp; aTitle, double aSalary) : title(aTitle), salary(aSalary) {} const string&amp;amp; getTitle() const { return title; } double getSalary() const { return salary; } void changeSalaryTo(double d) { salary = d; } private: string title; double salary; }; // class Position // // Directory class // class Directory { // // nested Entry class // class Entry { friend ostream&amp;amp; operator&amp;lt;&amp;lt;(ostream&amp;amp; os, const Entry&amp;amp; rhs) { os &amp;lt;&amp;lt; rhs.</description></item><item><title>Lab7</title><link>https://dk3156.github.io/dongje.kim/experience/oop/labs/oop_lab7/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dk3156.github.io/dongje.kim/experience/oop/labs/oop_lab7/</guid><description>Answers course.cpp // // course.cpp // rec07 // // Created by DJ on 3/11/22. // Copyright © 2022 DJ. All rights reserved. // #include &amp;#34;course.h&amp;#34; #include &amp;#34;student.h&amp;#34; #include &amp;lt;iostream&amp;gt; using namespace std; namespace BrooklynPoly{ ostream&amp;amp; operator&amp;lt;&amp;lt;(ostream&amp;amp; os, const Course&amp;amp; rhs) { os &amp;lt;&amp;lt; rhs.name &amp;lt;&amp;lt; &amp;#34;: &amp;#34;; for (size_t i = 0; i &amp;lt; rhs.students.size(); ++i){ os &amp;lt;&amp;lt; rhs.students[i]-&amp;gt;getName() &amp;lt;&amp;lt; &amp;#34; &amp;#34;; } return os; } Course::Course(const string&amp;amp; courseName): name(courseName) {} const string&amp;amp; Course::getName() const {return name;} bool Course::addStudent(Student* rhs){ for (size_t i = 0; i &amp;lt; students.</description></item><item><title>Lab8</title><link>https://dk3156.github.io/dongje.kim/experience/oop/labs/oop_lab8/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dk3156.github.io/dongje.kim/experience/oop/labs/oop_lab8/</guid><description>Answers gcd.cpp int greatestCommonDivisor(int x, int y) { while (y != 0) { int temp = x % y; x = y; y = temp; } return x; } testRational.cpp /* testRational.cpp CS2124 Implement the class Rational, so that the following program works. */ #include &amp;lt;iostream&amp;gt; // If time allows use separate compilation, otherwise just define the // class below with the methods / functions defined after main. //#include &amp;#34;Rational.h&amp;#34; using namespace std; // If time allows after implementing separate compilation, then wrap // the class in a namespace.</description></item><item><title>Lab9</title><link>https://dk3156.github.io/dongje.kim/experience/oop/labs/oop_lab9/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dk3156.github.io/dongje.kim/experience/oop/labs/oop_lab9/</guid><description>Answers #include &amp;lt;iostream&amp;gt; #include &amp;lt;vector&amp;gt; using namespace std; class PrintedMaterial { public: PrintedMaterial(unsigned num): numberOfPages(num){} virtual void displayNumPages() const = 0; private: unsigned numberOfPages; }; void PrintedMaterial::displayNumPages() const { cout &amp;lt;&amp;lt; numberOfPages &amp;lt;&amp;lt; endl; } class Magazine : public PrintedMaterial { public: Magazine(unsigned num): PrintedMaterial(num){} void displayNumPages() const { cout &amp;lt;&amp;lt; &amp;#34;This is magazine&amp;#39;s printing method: &amp;#34; &amp;lt;&amp;lt; endl; PrintedMaterial::displayNumPages(); } private: }; class Book : public PrintedMaterial { public: Book(unsigned num): PrintedMaterial(num){} void displayNumPages() const { cout &amp;lt;&amp;lt;&amp;#34;This is book&amp;#39;s printing method: &amp;#34; &amp;lt;&amp;lt; endl; PrintedMaterial::displayNumPages(); } private: }; class TextBook : public Book { public: TextBook(unsigned numPages, unsigned numIndxPgs ) : Book(numPages),numOfIndexPages(numIndxPgs){} void displayNumPages() const { cout &amp;lt;&amp;lt; &amp;#34;Pages: &amp;#34;; PrintedMaterial::displayNumPages(); cout &amp;lt;&amp;lt; &amp;#34;Index pages: &amp;#34;; cout &amp;lt;&amp;lt; numOfIndexPages &amp;lt;&amp;lt; endl; } private: unsigned numOfIndexPages; }; class Novel : public Book { public: Novel(unsigned num): Book(num){} private: }; void displayNumberOfPages(const PrintedMaterial&amp;amp; pm){ pm.</description></item><item><title>Lavaboy</title><link>https://dk3156.github.io/dongje.kim/projects/lavaboy/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dk3156.github.io/dongje.kim/projects/lavaboy/</guid><description>Created 2D platformer game using C++ programming and OpenGL&amp;rsquo;s SDL(Simple Direct Media Layer) libraries.
Employed with 2D sprite object based programming. Programmed vector, coordinate systems, sprite animation, collision, physics, and audio input without a help of external game engine.
github: https://github.com/dk3156/Lavaboy</description></item><item><title>OOP Homework</title><link>https://dk3156.github.io/dongje.kim/experience/oop/oophw/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dk3156.github.io/dongje.kim/experience/oop/oophw/</guid><description>HW 1
HW 2
HW 3
HW 4
HW 5
HW 6
HW 7
HW 8</description></item><item><title>OOP labs</title><link>https://dk3156.github.io/dongje.kim/experience/oop/ooplab/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dk3156.github.io/dongje.kim/experience/oop/ooplab/</guid><description>Lab 1
Lab 2
Lab 3
Lab 4
Lab 5
Lab 6
Lab 7
Lab 8
Lab 9
Lab 10
Lab 11
Lab 12
Lab 13
Lab 14</description></item><item><title>Sentiment Analysis App</title><link>https://dk3156.github.io/dongje.kim/projects/sentiment/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dk3156.github.io/dongje.kim/projects/sentiment/</guid><description>Toxic Comment Classification with 🤗 Transformers Link to my Huggingface space: https://huggingface.co/spaces/dk3156/sentiment_analysis_app
Link to my github repo: https://github.com/dk3156/sentiment_analysis_app
Description A research initiative founded by Jigsaw and Google (both a part of Alphabet) are working on tools to help improve online conversation. One area of focus is the study of negative online behaviors, like toxic comments (i.e. comments that are rude, disrespectful or otherwise likely to make someone leave a discussion).</description></item></channel></rss>