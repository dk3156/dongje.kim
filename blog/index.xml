<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Blogs on DONGJE KIM</title><link>https://dk3156.github.io/dongje.kim/blog/</link><description>Recent content in Blogs on DONGJE KIM</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Tue, 31 Oct 2023 00:00:00 +0000</lastBuildDate><atom:link href="https://dk3156.github.io/dongje.kim/blog/index.xml" rel="self" type="application/rss+xml"/><item><title>네트워크</title><link>https://dk3156.github.io/dongje.kim/blog/os/network/</link><pubDate>Tue, 31 Oct 2023 00:00:00 +0000</pubDate><guid>https://dk3156.github.io/dongje.kim/blog/os/network/</guid><description>대규모 트래픽 처리가 중요한 이유: 잠재적인 고객이 이탈
서버가 터지는 이유는? 서버란? 외부로부터 들어오는 요청을 받아 처리해주고 응답을 주는 프로그램이 돌아가고 있는 어느 컴퓨터. 서버또한 처리속도, cpu, 메모리, 저장장치에 영향을 받는다.
웹 서버라는 프로세스가 있다면 그 프로세스 안에는 다수의 요청을 시분할 처리하는 스레드가 있다. 스레드 수가 많아봐야 결국 task를 처리하는 것은 cpu이기 때문에 속도에 한계가 있다. 요청을 너무 많이 큐에 넣다보면 오버플로우가 발생한다. 메모리 오버플로우가 나면 서버가 종료된다.
해결방안은?
요청을 충분히 빠르게 처리하면 된다.</description></item><item><title>운영체제</title><link>https://dk3156.github.io/dongje.kim/blog/os/os/</link><pubDate>Tue, 31 Oct 2023 00:00:00 +0000</pubDate><guid>https://dk3156.github.io/dongje.kim/blog/os/os/</guid><description>운영체제 란? 시스템의 지원과 동작을 관리하는 소프트웨어. 프로세스, 저장장치, 네트워킹, 사용자, 하드웨어를 관리 과정 사용자 &amp;ndash;&amp;gt; 운영체제 &amp;ndash;&amp;gt; 주기억장치 / 보조기억장치 &amp;ndash;&amp;gt; CPU 사용자가 프로그램 실행을 요청 -&amp;gt; 운영체제가 프로그램 정보를 읽어 메모리에 로드한다. -&amp;gt; cpu는 프로그램을 가져다 메모리를 관리하고 명령물을 실행한다.
메모리 구조 Code, Data, Heap, Stack
code &amp;mdash;- 소스코드가 들어가는 부분. 실행할 프로그램의 코드가 저장된다. 실행 파일을 구성하는 명령어가 올라간다. (함수, 제어문, 상수)
data &amp;mdash;- global, static 변수가 할당되는 영역.</description></item><item><title>웹 브라우저에 URL을 입력했을때, 무슨 일이 일어날까?</title><link>https://dk3156.github.io/dongje.kim/blog/frontend/web/</link><pubDate>Mon, 30 Oct 2023 00:00:00 +0000</pubDate><guid>https://dk3156.github.io/dongje.kim/blog/frontend/web/</guid><description>웹 브라우저에 URL 을 입력했을 때, 일어나는 일들 웹 브라우저에 URL을 입력한다. 웹 브라우저가 도메인의 IP주소를 조회한다. (먼저 캐시를 찾고, 그 다음 DNS를 검색한다.) 웹 브라우저가 찾은 IP 주소를 기반으로 서버와의 TCP 연결을 시작한다. 웹 브라우저가 HTTP 요청을 서버로 전송한다. 웹 서버가 요청을 처리하고 응답을 웹 브라우저로 전송한다. 웹 브라우저가 전송 받은 컨텐츠를 렌더링한다. DNS 란? 인터넷 전화번호부. 유저는 도메인 이름을 통해 온라인 정보에 액세스. (www.google.com) DNS는 브라우저가 인터넷 자원을 로드할 수 있도록 도메인 이름을 IP주소로 변환.</description></item><item><title>자바 스프링 주요 개념</title><link>https://dk3156.github.io/dongje.kim/blog/javaspring/spring/</link><pubDate>Mon, 30 Oct 2023 00:00:00 +0000</pubDate><guid>https://dk3156.github.io/dongje.kim/blog/javaspring/spring/</guid><description>자바 스프링의 특성 Inversion of Control 객체 생성부터 소멸까지 객체 생명 주기 관리를 개발자가 아닌 컨테이너가 대신 해주는것. 객체의 생성을 책임지고, 의존성을 관리한다. 객체 관리 주체가 프레임워크 (Container) 가 되기 때문에 개발자는 로직에 집중할 수 있는 장점이 있음.
Depedency Injection 각 클래스 간의 의존관계를 빈 설정 (bean definition) 정보를 바탕으로 컨테이너가 자동으로 연결해주는 것. 수정자 주입, 생정자 주입, 필드 주입이 있음. (setter, constructor, method injection)
Bean 이란? 스프링 컨테이너에 의해 관리되는 재사용 가능한 소프트웨어 컴포넌트.</description></item><item><title>자바 스프링 튜토리얼</title><link>https://dk3156.github.io/dongje.kim/blog/javaspring/springtutorial/</link><pubDate>Mon, 30 Oct 2023 00:00:00 +0000</pubDate><guid>https://dk3156.github.io/dongje.kim/blog/javaspring/springtutorial/</guid><description>데이터 베이스 테이블과 자바 클래스를 매핑하는법 spring-boot-starter-data-jpa 의존성을 추가하고 @Entity 어노테이션을 붙여서 매핑한다.
@RequestBody, @ResponseBody JSON 형식의 데이터를 받기 위해 클라이언트에서 요청할 때 JSON -&amp;gt; Java Object 변환이 필요하다. 서버에서도 Java Object -&amp;gt; JSON 변환해서 보내줘야 한다.
@ResponseBody -&amp;gt; 자바 객체를 JSON 내용으로 매핑한다. return type에 맡는 message Converter 를 통해 리턴하는 객체를 해당 타입으로 변환해서 클라이언트로 전달한다.
request body = { &amp;#34;id&amp;#34;:&amp;#34;test0101&amp;#34; &amp;#34;email&amp;#34;:&amp;#34;test@gmail.com&amp;#34; } public class Member { private String id; private String email; } 이와 같이 바디를 클래스 객체로 변환 시킨다.</description></item><item><title>Hugo &amp; Github pages</title><link>https://dk3156.github.io/dongje.kim/blog/hugo/first/</link><pubDate>Mon, 17 Jul 2023 00:00:00 +0000</pubDate><guid>https://dk3156.github.io/dongje.kim/blog/hugo/first/</guid><description>These are some errors / solutions / conjecture that I encountered when making hugo website.
Error_1 Submodule url
I had to delete original repo for my portfolio website and create a whole new repo because of this error. (Original website at dk3156.github.io)
For build and deploy site, github action give out error for not able to find anatole theme repo. In hugo, themes are not the local files created inside your local files.</description></item></channel></rss>